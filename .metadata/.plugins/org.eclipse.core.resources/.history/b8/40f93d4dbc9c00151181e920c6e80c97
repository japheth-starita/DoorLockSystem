package com.example.doorlocksystem;

import java.util.Random;
import java.util.Set;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.TextView;

public class RequestCodeActivity extends Activity {
	BluetoothAdapter adapt;
    TextView pubKey;
	TextView privKey;
    
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_request_code);
		adapt = BluetoothAdapter.getDefaultAdapter();
		adapt.enable();
		Set<BluetoothDevice> pairedDevices = adapt.getBondedDevices();
		if (pairedDevices.size() > 0) {
			for (BluetoothDevice device : pairedDevices) {
			BluetoothDevice mDevice = device;
			}
		}
		pubKey = (TextView) findViewById(R.id.pubKey);
		privKey = (TextView) findViewById(R.id.privKey);
		Integer[] values = new Integer[2];
	    values[0] = 10; //generate number between 10 
	    values[1] = 97; // and 100
	    
	    generatingPrivateCode countingTask = new generatingPrivateCode(); // create a new task
	    countingTask.execute(values);
	}
	
	public void gotoLockUnlockActivity(View view){
		Intent intent = new Intent(this, LockUnlockActivity.class);
		startActivity(intent);
	}
	
	
	public void genpublicNum(){
		Random r = new Random();
		int min = 1000;
		int max = 10000;
		int ran = r.nextInt(max - min + 1) + min;
		while(!(isPrime(ran))){
		
			ran+=1;
		}
		pubKey.setText(ran);
		
	}
	
	public void genprivateNum(){
		Random r = new Random();
		int min = 10;
		int max = 100;
		int ran = r.nextInt(max - min + 1) + min;
		while(!(isPrime(ran))){
		
			ran+=1;
		}
		privKey.setText(ran);
	}
	
	public boolean isPrime(int n) {
	    // fast even test.
	    if(n > 2 && (n & 1) == 0)
	       return false;
	    // only odd factors need to be tested up to n^0.5
	    for(int i = 3; i * i <= n; i += 2)
	        if (n % i == 0) 
	            return false;
	    return true;
	}
	
	private class generatingPrivateCode extends AsyncTask<Integer, Integer, Integer>{

		@Override
		protected Integer doInBackground(Integer... params) {
			Random r = new Random();
			int ran = r.nextInt(params[1] - params[0] + 1) + params[0];
			while(!(isPrime(ran))){
				ran+=1;
				try {
				     Thread.sleep(1000); //Sleep for 1 second
				    } catch (InterruptedException e) {
				     e.printStackTrace();
				    }
			}
			return ran;
		}
		
		@Override
		  protected void onPostExecute(Integer result) {
		   super.onPostExecute(result);
		   privKey.setText(privKey.getText().toString()+result.toString());
		   ((ProgressBar) findViewById(R.id.progBar)).setVisibility(View.GONE);
		   ((Button) findViewById(R.id.gotoLockUnlock)).setEnabled(true);
		  }  
	}
	
}
