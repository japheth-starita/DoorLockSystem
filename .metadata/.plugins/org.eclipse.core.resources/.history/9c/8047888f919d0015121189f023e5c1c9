package com.example.doorlocksystem;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import android.bluetooth.BluetoothSocket;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.widget.TextView;

public class DeviceConnected extends Thread {
	private final BluetoothSocket mmSocket;
	private final InputStream mmInStream;
	private final OutputStream mmOutStream;
	public DeviceConnected(BluetoothSocket socket) {
		mmSocket = socket;
		InputStream tmpIn = null;
		OutputStream tmpOut = null;
		try {
			tmpIn = socket.getInputStream();
			tmpOut = socket.getOutputStream();
		} catch (IOException e) { }
		
		mmInStream = tmpIn;
		mmOutStream = tmpOut;
	}
		
	public void run() {
		Handler mHandler = new Handler() {
			@Override
			public void handleMessage(Message msg) {
				byte[] writeBuf = (byte[]) msg.obj;
				int begin = (int)msg.arg1;
				int end = (int)msg.arg2;
	
				switch(msg.what) {
					case 1:
						String writeMessage = new String(writeBuf);
						writeMessage = writeMessage.substring(begin, end);
						break;
				}
			}
		};

        final byte delimiter = 10; //This is the ASCII code for a newline character
        boolean stopWorker = false;
        int readBufferPosition = 0;
        byte [] readBuffer = new byte[1024];
		while(!Thread.currentThread().isInterrupted() && !stopWorker){
			try {
				int bytesAvailable = mmInStream.available();                        
				if(bytesAvailable > 0){
					byte[] packetBytes = new byte[bytesAvailable];
					mmInStream.read(packetBytes);
					for(int i=0;i<bytesAvailable;i++){
						byte b = packetBytes[i];
						if(b == delimiter){
							byte[] encodedBytes = new byte[readBufferPosition];
							System.arraycopy(readBuffer, 0, encodedBytes, 0, encodedBytes.length);
							final String data = new String(encodedBytes, "US-ASCII");
							readBufferPosition = 0;
	                        RequestCodeActivity.pubKey.setText(data);
	
						
						}
						else{
							readBuffer[readBufferPosition++] = b;
						}
					}
				}
			} 
			catch (IOException ex) {
	                stopWorker = true;
	        }
	    }
	}
		
	public void write(byte[] bytes) {
		try {
			mmOutStream.write(bytes);
		} catch (IOException e) { }
	}
		
	public void cancel() {
		try {
			mmSocket.close();
		} catch (IOException e) { }
	}
}

